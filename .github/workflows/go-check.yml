name: Go Checks
on:
  workflow_call:
    inputs:
      go-version:
        required: false
        type: string
      go-generate-ignore-protoc-version-comments:
        required: false
        type: boolean
      go-cache:
        required: false
        type: boolean
        default: false

jobs:
  unit:
    runs-on: ubuntu-latest
    name: All
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Check out the base sha
        id: base
        env:
          BASE_SHA: ${{ github.event.pull_request.base.sha || github.event.merge_group.base_sha }}
        run: |
          if [[ -n "$BASE_SHA" ]]; then
            echo "sha=$BASE_SHA" | tee -a $GITHUB_OUTPUT
            git fetch origin "$BASE_SHA"
          fi
      - name: Check out the latest stable version of Go
        id: stable
        uses: actions/setup-go@v5
        with:
          go-version: stable
          cache: false
      - name: Read the Unified GitHub Workflows configuration
        id: config
        uses: ipdxco/unified-github-workflows/.github/actions/read-config@main
      - name: Read the go.mod file
        id: go-mod
        uses: ipdxco/unified-github-workflows/.github/actions/read-go-mod@main
      - name: Set up the Go version read from the go.mod file
        id: go
        if: (inputs.go-version || fromJSON(steps.go-mod.outputs.json).Go) != steps.stable.outputs.go-version || inputs.go-cache != 'false'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version || fromJSON(steps.go-mod.outputs.json).Go }}
          cache: ${{ inputs.go-cache }}
      - name: Run repo-specific setup
        uses: ./.github/actions/go-check-setup
        if: hashFiles('./.github/actions/go-check-setup') != ''
      - name: Check that go.mod is tidy
        uses: protocol/multiple-go-modules@v1.4
        with:
          run: |
            go mod tidy
            if [[ -n $(git ls-files --other --exclude-standard --directory -- go.sum) ]]; then
              echo "go.sum was added by go mod tidy"
              exit 1
            fi
            git diff --exit-code -- go.sum go.mod
      - name: Set up golangci-lint
        id: golangci-lint
        env:
          GOLANGCI_LINT_VERSION: eabc2638a66daf5bb6c6fb052a32fa3ef7b6600d # v2.1.6
          GO111MODULE: on
        run: |
          echo "Installing golangci-lint@$GOLANGCI_LINT_VERSION"
          go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@$GOLANGCI_LINT_VERSION || go get github.com/golangci/golangci-lint/v2/cmd/golangci-lint@$GOLANGCI_LINT_VERSION

          if [[ ! -f .golangci.yml && ! -f .golangci.toml && ! -f .golangci.json && ! -f .golangci.yaml ]]; then
            echo "default_linters=none" | tee -a $GITHUB_OUTPUT
          fi
      - name: golangci-lint run
        if: success() || failure()
        uses: protocol/multiple-go-modules@v1.4
        env:
          BASE_SHA: ${{ steps.base.outputs.sha }}
          DEFAULT_LINTERS: ${{ steps.golangci-lint.outputs.default_linters }}
        with:
          run: golangci-lint run --default=$DEFAULT_LINTERS --enable=govet --enable=staticcheck --new=false --new-from-merge-base= --new-from-patch= --new-from-rev=$BASE_SHA --verbose
      - name: golangci-lint fmt
        if: success() || failure()
        uses: protocol/multiple-go-modules@v1.4
        with:
          run: |
            out="$(golangci-lint fmt --enable=gofmt --diff | grep '^diff' || echo '' | cut -d' ' -f3)"
            if [[ -n "$out" ]]; then
              echo "$out" | awk '{print "::error file=" $0 ",line=0,col=0::File is not formatted."}'
              exit 1
            fi
      - name: go generate
        uses: protocol/multiple-go-modules@v1.4
        if: (success() || failure()) && fromJSON(steps.config.outputs.json).gogenerate == true
        env:
          IGNORE_PROTOC_VERSION_COMMENTS: ${{ inputs.go-generate-ignore-protoc-version-comments }}
        with:
          run: |
            git clean -fd # make sure there aren't untracked files / directories
            if [[ "$IGNORE_PROTOC_VERSION_COMMENTS" == "true" ]]; then
              find . -name '*.pb.go' -print0 | xargs -0 -r sed -i '/^\/\/.*protoc.*v/d'
              git add .
              git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
              git config --global user.name "github-actions[bot]"
              git diff --cached --quiet || git commit -m "chore: remove protoc version comments"
            fi
            go generate -x ./...
            if [[ "$IGNORE_PROTOC_VERSION_COMMENTS" == "true" ]]; then
              find . -name '*.pb.go' -print0 | xargs -0 -r sed -i '/^\/\/.*protoc.*v/d'
            fi
            git add .
            # check if go generate modified or added any files
            if ! $(git diff-index HEAD --exit-code --quiet); then
              echo "go generated caused changes to the repository:"
              git status --short
              git diff HEAD
              exit 1
            fi
