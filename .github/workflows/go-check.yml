name: Go Checks
on:
  workflow_call:
    inputs:
      go-version:
        required: false
        type: string
      go-generate-ignore-protoc-version-comments:
        required: false
        type: boolean
      go-cache:
        required: false
        type: boolean
        default: false

jobs:
  unit:
    runs-on: ubuntu-latest
    name: All
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Check out the base sha
        id: base
        env:
          BASE_SHA: ${{ github.event.pull_request.base.sha || github.event.merge_group.base_sha }}
        run: |
          if [[ -n "$BASE_SHA" ]]; then
            echo "sha=$BASE_SHA" | tee -a $GITHUB_OUTPUT
            git fetch origin "$BASE_SHA"
          fi
      - name: Check out the latest stable version of Go
        id: stable
        uses: actions/setup-go@v5
        with:
          go-version: stable
          cache: false
      - name: Read the Unified GitHub Workflows configuration
        id: config
        uses: ipdxco/unified-github-workflows/.github/actions/read-config@main
      - name: Read the go.mod file
        id: go-mod
        uses: ipdxco/unified-github-workflows/.github/actions/read-go-mod@main
      - name: Set up the Go version read from the go.mod file
        id: go
        if: (inputs.go-version || fromJSON(steps.go-mod.outputs.json).Go) != steps.stable.outputs.go-version || inputs.go-cache != 'false'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version || fromJSON(steps.go-mod.outputs.json).Go }}
          cache: ${{ inputs.go-cache }}
      - name: Run repo-specific setup
        uses: ./.github/actions/go-check-setup
        if: hashFiles('./.github/actions/go-check-setup') != ''
      - name: Install staticcheck
        env:
          STATICCHECK_VERSIONS: | # 2025.1.1, 2025.1.1, 2024.1.1, 2023.1.7, 2023.1.7, 2023.1.7, 2022.1.3, 2022.1.3, 2021.1.2, 2021.1.2, 2021.1.2, 2020.1.6
            {
              "1.24": "b8ec13ce4d00445d75da053c47498e6f9ec5d7d6",
              "1.23": "b8ec13ce4d00445d75da053c47498e6f9ec5d7d6",
              "1.22": "56172d41b117cc2c2f99f65fe0a790c8d7d7ea66",
              "1.21": "a093f7c2d3d45d5104fb3414ae939a98be37be02",
              "1.20": "a093f7c2d3d45d5104fb3414ae939a98be37be02",
              "1.19": "a093f7c2d3d45d5104fb3414ae939a98be37be02",
              "1.18": "376210a89477dedbe6fdc4484b233998650d7b3c",
              "1.17": "376210a89477dedbe6fdc4484b233998650d7b3c",
              "1.16": "c8caa92bad8c27ae734c6725b8a04932d54a147b",
              "1.15": "c8caa92bad8c27ae734c6725b8a04932d54a147b",
              "1.14": "c8caa92bad8c27ae734c6725b8a04932d54a147b",
              "1.13": "5b7de96f09104e2be384aa93a7c821eb5e77378b"
            }
          GO_VERSION: ${{ steps.go.outputs.go-version }}
          GO111MODULE: on
        run: |
          version="$(jq -nr 'env.STATICCHECK_VERSIONS | fromjson | .[env.GO_VERSION | sub("\\.[^.]+$"; "")] // "latest"')"
          echo "Installing staticcheck@$version"
          go install honnef.co/go/tools/cmd/staticcheck@$version || go get honnef.co/go/tools/cmd/staticcheck@$version
      - name: Install golangci-lint
        if: hashFiles('.golangci.yml', '.golangci.toml', '.golangci.json', '.golangci.yaml') != ''
        env:
          GOLANGCI_LINT_VERSIONS: | # v2.1.6, v2.1.6, v1.63.4, v1.59.1, v1.55.2, v1.53.3, v1.47.3, v1.44.2, v1.44.2, v1.42.1, v1.39.0, v1.37.1
            {
              "1.24": "eabc2638a66daf5bb6c6fb052a32fa3ef7b6600d",
              "1.23": "eabc2638a66daf5bb6c6fb052a32fa3ef7b6600d",
              "1.22": "c1149695535fda62f6b574bc55dfbc333693647e",
              "1.21": "1a55854aff4ef60cd8c4e709b650b281303ca7aa",
              "1.20": "e3c2265f4939976874989e159386b3bb7dcf8e1f",
              "1.19": "2dcd82f331c9e834f283075b23ef289435be9354",
              "1.18": "d186efe918b91431b6d615d7968eb14ba7c6614a",
              "1.17": "d58dbde584c801091e74a00940e11ff18c6c68bd",
              "1.16": "d58dbde584c801091e74a00940e11ff18c6c68bd",
              "1.15": "54f4301ddfc884a7eac5b6ebf68868d6078279d3",
              "1.14": "9aea4aee1c0d47f74c016c1f0066cb90e2f7d2e8",
              "1.13": "b39dbcd694baddce38eff2cb2aa86d4e4cf06753"
            }
          GO_VERSION: ${{ steps.go.outputs.go-version }}
          GO111MODULE: on
        run: |
          version="$(jq -nr 'env.GOLANGCI_LINT_VERSIONS | fromjson | .[env.GO_VERSION | sub("\\.[^.]+$"; "")] // "latest"')"
          echo "Installing golangci-lint@$version"
          go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@$version ||
            go install github.com/golangci/golangci-lint/cmd/golangci-lint@$version ||
            go get github.com/golangci/golangci-lint/v2/cmd/golangci-lint@$version ||
            go get github.com/golangci/golangci-lint/cmd/golangci-lint@$version
      - name: Check that go.mod is tidy
        uses: protocol/multiple-go-modules@v1.4
        with:
          run: |
            go mod tidy
            if [[ -n $(git ls-files --other --exclude-standard --directory -- go.sum) ]]; then
              echo "go.sum was added by go mod tidy"
              exit 1
            fi
            git diff --exit-code -- go.sum go.mod
      - name: gofmt
        if: success() || failure() # run this step even if the previous one failed
        run: |
          out=$(gofmt -s -l .)
          if [[ -n "$out" ]]; then
            echo $out | awk '{print "::error file=" $0 ",line=0,col=0::File is not gofmt-ed."}'
            exit 1
          fi
      - name: go vet
        if: success() || failure() # run this step even if the previous one failed
        uses: protocol/multiple-go-modules@v1.4
        with:
          run: go vet ./...
      - name: staticcheck
        if: success() || failure() # run this step even if the previous one failed
        uses: protocol/multiple-go-modules@v1.4
        with:
          run: |
            set -o pipefail
            staticcheck ./... | sed -e 's@\(.*\)\.go@./\1.go@g'
      - name: golangci-lint run
        if: (success() || failure()) && hashFiles('.golangci.yml', '.golangci.toml', '.golangci.json', '.golangci.yaml') != ''
        uses: protocol/multiple-go-modules@v1.4
        env:
          BASE_SHA: ${{ steps.base.outputs.sha }}
        with:
          run: golangci-lint run --new=false --new-from-merge-base= --new-from-patch= --new-from-rev=$BASE_SHA --verbose
      - name: go generate
        uses: protocol/multiple-go-modules@v1.4
        if: (success() || failure()) && fromJSON(steps.config.outputs.json).gogenerate == true
        env:
          IGNORE_PROTOC_VERSION_COMMENTS: ${{ inputs.go-generate-ignore-protoc-version-comments }}
        with:
          run: |
            git clean -fd # make sure there aren't untracked files / directories
            if [[ "$IGNORE_PROTOC_VERSION_COMMENTS" == "true" ]]; then
              find . -name '*.pb.go' -print0 | xargs -0 -r sed -i '/^\/\/.*protoc.*v/d'
              git add .
              git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
              git config --global user.name "github-actions[bot]"
              git diff --cached --quiet || git commit -m "chore: remove protoc version comments"
            fi
            go generate -x ./...
            if [[ "$IGNORE_PROTOC_VERSION_COMMENTS" == "true" ]]; then
              find . -name '*.pb.go' -print0 | xargs -0 -r sed -i '/^\/\/.*protoc.*v/d'
            fi
            git add .
            # check if go generate modified or added any files
            if ! $(git diff-index HEAD --exit-code --quiet); then
              echo "go generated caused changes to the repository:"
              git status --short
              git diff HEAD
              exit 1
            fi
