name: Go Checks
on:
  workflow_call:
    inputs:
      go-version:
        required: false
        type: string
      golangci-lint-version:
        required: false
        type: string
      go-generate-ignore-protoc-version-comments:
        required: false
        type: boolean
      go-cache:
        required: false
        type: boolean
        default: false

jobs:
  unit:
    runs-on: ubuntu-latest
    name: All
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Check out the base sha
        id: base
        env:
          BASE_SHA: ${{ github.event.pull_request.base.sha || github.event.merge_group.base_sha }}
        run: |
          if [[ -n "$BASE_SHA" ]]; then
            echo "sha=$BASE_SHA" | tee -a $GITHUB_OUTPUT
            git fetch origin "$BASE_SHA"
          fi
      - name: Check out the latest stable version of Go
        id: stable
        uses: actions/setup-go@v5
        with:
          go-version: stable
          cache: false
      - name: Read the Unified GitHub Workflows configuration
        id: config
        uses: ipdxco/unified-github-workflows/.github/actions/read-config@main
      - name: Read the go.mod file
        id: go-mod
        uses: ipdxco/unified-github-workflows/.github/actions/read-go-mod@main
      - name: Set up the Go version read from the go.mod file
        id: go
        if: (inputs.go-version || fromJSON(steps.go-mod.outputs.json).Go) != steps.stable.outputs.go-version || inputs.go-cache != 'false'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version || fromJSON(steps.go-mod.outputs.json).Go }}
          cache: ${{ inputs.go-cache }}
      - name: Run repo-specific setup
        uses: ./.github/actions/go-check-setup
        if: hashFiles('./.github/actions/go-check-setup') != ''
      - name: Check that go.mod is tidy
        uses: protocol/multiple-go-modules@v1.4
        with:
          run: |
            go mod tidy
            if [[ -n $(git ls-files --other --exclude-standard --directory -- go.sum) ]]; then
              echo "go.sum was added by go mod tidy"
              exit 1
            fi
            git diff --exit-code -- go.sum go.mod
      - name: Set up golangci-lint
        id: golangci-lint
        env:
          GOLANGCI_LINT_VERSION: ${{ inputs.golangci-lint-version }}
          GOLANGCI_LINT_VERSIONS: |
            {
              "1.24": {
                "sha": "eabc2638a66daf5bb6c6fb052a32fa3ef7b6600d",
                "ref": "v2.1.6"
              },
              "1.23": {
                "sha": "474fdafc729520cbbbe898c980f2d519268fa56c",
                "ref": "v1.64.0"
              },
              "1.22": {
                "sha": "1a55854aff4ef60cd8c4e709b650b281303ca7aa",
                "ref": "v1.59.1"
              },
              "1.21": {
                "sha": "58a724a05e33a040826b471b2e6a8a8fc970feb2",
                "ref": "v1.56.2"
              },
              "1.20": {
                "sha": "411e0bbbd3096aa0ee2b924160629bdf2bc81d40",
                "ref": "v1.54.2"
              },
              "1.19": {
                "sha": "8926a95fa8e051dca7cc4a9921a5f7f9bebdc8d2",
                "ref": "v1.50.1"
              },
              "1.18": {
                "sha": "8926a95fa8e051dca7cc4a9921a5f7f9bebdc8d2",
                "ref": "v1.50.1"
              },
              "1.17": {
                "sha": "8bdc4d3f8044b1a20e10a9f519b5f738e8188877",
                "ref": "v1.45.2"
              },
              "1.16": {
                "sha": "625445b1f559dc0a09bc9345dc39d50b64ec18bc",
                "ref": "v1.40.1"
              },
              "1.15": {
                "sha": "b39dbcd694baddce38eff2cb2aa86d4e4cf06753",
                "ref": "v1.37.1"
              },
              "1.14": {
                "sha": "b39dbcd694baddce38eff2cb2aa86d4e4cf06753",
                "ref": "v1.37.1"
              },
              "1.13": {
                "sha": "6bd10d01fde78697441d9c11e2235f0dbb1e2822",
                "ref": "v1.26.0"
              }
            }
          GO_VERSION: ${{ steps.go.outputs.go-version }}
          GO111MODULE: on
        run: |
          version="$GOLANGCI_LINT_VERSION"
          if [[ -z "$version" ]]; then
            version="$(jq -nr 'env.GOLANGCI_LINT_VERSIONS | fromjson | .[env.GO_VERSION | sub("\\.[^.]+$"; "")].sha // "latest"')"
          fi

          echo "Installing golangci-lint@$version"
          go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@$version ||
            go install github.com/golangci/golangci-lint//cmd/golangci-lint@$version ||
            go get github.com/golangci/golangci-lint/v2/cmd/golangci-lint@$version ||
            go get github.com/golangci/golangci-lint//cmd/golangci-lint@$version

          version="$(golangci-lint --version | cut -d' ' -f4)"
          major="$(echo "$version" | cut -d'.' -f1)"

          echo "major_version=$major" | tee -a $GITHUB_OUTPUT

          configured=true
          if [[ ! -f .golangci.yml && ! -f .golangci.toml && ! -f .golangci.json && ! -f .golangci.yaml ]]; then
            configured=false
          fi
          echo "is_configured=$configured" | tee -a $GITHUB_OUTPUT
      - name: golangci-lint run
        if: success() || failure()
        uses: protocol/multiple-go-modules@v1.4
        env:
          BASE_SHA: ${{ steps.base.outputs.sha }}
          GOLANGCI_LINT_IS_CONFIGURED: ${{ steps.golangci-lint.outputs.is_configured }}
        with:
          run: |
            if [[ "$GOLANGCI_LINT_IS_CONFIGURED" == "true" ]]; then
              golangci-lint run --enable=govet --enable=staticcheck --new=false --new-from-merge-base= --new-from-patch= --new-from-rev=$BASE_SHA --verbose
            else
              golangci-lint run --enable-only=govet --enable-only=staticcheck --new=false --new-from-merge-base= --new-from-patch= --new-from-rev=$BASE_SHA --verbose
            fi
      - name: golangci-lint fmt
        if: success() || failure()
        uses: protocol/multiple-go-modules@v1.4
        env:
          GOLANGCI_LINT_MAJOR_VERSION: ${{ steps.golangci-lint.outputs.major_version }}
        with:
          run: |
            out=""

            if [[ "$GOLANGCI_LINT_MAJOR_VERSION" == "v2" ]]; then
              out="$(golangci-lint fmt --enable=gofmt --diff | grep '^diff' || echo '' | cut -d' ' -f3)"
            else
              out="$(golangci-lint run --enable-only=gofmt | grep '^diff' || echo '' | cut -d' ' -f3)"
            fi

            if [[ -n "$out" ]]; then
              echo "$out" | awk '{print "::error file=" $0 ",line=0,col=0::File is not formatted."}'
              exit 1
            fi
      - name: go generate
        uses: protocol/multiple-go-modules@v1.4
        if: (success() || failure()) && fromJSON(steps.config.outputs.json).gogenerate == true
        env:
          IGNORE_PROTOC_VERSION_COMMENTS: ${{ inputs.go-generate-ignore-protoc-version-comments }}
        with:
          run: |
            git clean -fd # make sure there aren't untracked files / directories
            if [[ "$IGNORE_PROTOC_VERSION_COMMENTS" == "true" ]]; then
              find . -name '*.pb.go' -print0 | xargs -0 -r sed -i '/^\/\/.*protoc.*v/d'
              git add .
              git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
              git config --global user.name "github-actions[bot]"
              git diff --cached --quiet || git commit -m "chore: remove protoc version comments"
            fi
            go generate -x ./...
            if [[ "$IGNORE_PROTOC_VERSION_COMMENTS" == "true" ]]; then
              find . -name '*.pb.go' -print0 | xargs -0 -r sed -i '/^\/\/.*protoc.*v/d'
            fi
            git add .
            # check if go generate modified or added any files
            if ! $(git diff-index HEAD --exit-code --quiet); then
              echo "go generated caused changes to the repository:"
              git status --short
              git diff HEAD
              exit 1
            fi
